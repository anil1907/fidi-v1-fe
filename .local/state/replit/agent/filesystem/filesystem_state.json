{"file_contents":{"README.md":{"content":"# Nutrisyonel - Diyetisyen Yönetim Sistemi\n\nModern ve kullanıcı dostu bir diyetisyen yönetim sistemi. Danışan takibi, diyet şablonları, beslenme planları ve randevu yönetimi için kapsamlı bir çözüm.\n\n## ✨ Özellikler\n\n### 🧑‍⚕️ Danışan Yönetimi\n- Danışan bilgilerini ekleme, düzenleme ve silme\n- Arama ve filtreleme özellikleri\n- Detaylı danışan profilleri\n- Hedef takibi ve notlar\n\n### 📋 Şablon Yöneticisi\n- Görsel sürükle-bırak şablon editörü\n- Öğün bazında detaylı planlama\n- Şablon klonlama ve düzenleme\n- Tekrar kullanılabilir diyet şablonları\n\n### 🍽️ Diyet Planı Oluşturma\n- Şablonlardan hızlı plan oluşturma\n- Tarih aralığı belirleme\n- A4 uyumlu yazdırma özelliği\n- Plan önizleme ve düzenleme\n\n### 📅 Randevu Takvimu\n- Haftalık ve aylık takvim görünümleri\n- Randevu oluşturma ve yönetimi\n- Durum takibi (planlandı, tamamlandı, iptal edildi)\n- Günlük randevu özeti\n\n### 🎨 Modern Arayüz\n- Responsive tasarım (mobil uyumlu)\n- Karanlık/açık tema desteği\n- Türkçe dil desteği\n- Erişilebilirlik özellikleri\n\n## 🛠️ Teknoloji Yığını\n\n### Frontend\n- **React 18** - Modern UI kütüphanesi\n- **TypeScript** - Tip güvenli geliştirme\n- **Tailwind CSS** - Utility-first CSS framework\n- **shadcn/ui** - Modern UI bileşenleri\n- **React Hook Form** - Form yönetimi\n- **Zod** - Şema doğrulama\n- **Tanstack Query** - Server state yönetimi\n- **Zustand** - Client state yönetimi\n- **date-fns** - Tarih işlemleri\n- **Lucide React** - İkonlar\n\n### Backend\n- **Express.js** - Node.js web framework\n- **TypeScript** - Tip güvenli backend\n- **In-Memory Storage** - Hızlı prototiping için\n\n### Geliştirme Araçları\n- **Vite** - Hızlı geliştirme sunucusu\n- **ESLint** - Kod kalitesi\n- **Prettier** - Kod formatı\n- **Wouter** - Lightweight routing\n\n## 🚀 Kurulum\n\n### Gereksinimler\n- Node.js 18+ \n- npm veya yarn\n\n### Adımlar\n\n1. **Projeyi klonlayın**\n```bash\ngit clone <repository-url>\ncd nutrisyonel\n","size_bytes":2018},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nNutrisyonel is a modern, comprehensive dietitian management system built for Turkish-speaking professionals. The application provides tools for managing clients, creating reusable diet templates, generating personalized diet plans, and scheduling appointments. It features a responsive design with dark/light theme support and focuses on providing an intuitive user experience for nutrition professionals.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type-safe development\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent UI design\n- **State Management**: \n  - Zustand for client-side state management (UI states, filters, modals)\n  - TanStack Query (React Query) for server state management with caching and optimistic updates\n- **Form Handling**: React Hook Form with Zod for schema validation\n- **Internationalization**: Turkish (tr-TR) as the default locale with date-fns for date formatting\n- **UI Components**: Radix UI primitives through shadcn/ui for accessibility and consistency\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **API Design**: RESTful API with comprehensive CRUD operations for all resources\n- **Storage**: In-memory storage implementation with interface for easy database migration\n- **Development**: Hot module replacement with Vite integration for seamless development experience\n\n### Data Models\nThe application manages four core entities:\n- **Users**: Authentication and system access\n- **Clients**: Dietitian's patients with personal information and goals\n- **Templates**: Reusable diet plan templates with meal sections and items\n- **Diet Plans**: Personalized plans assigned to clients based on templates\n- **Appointments**: Scheduling system for client consultations\n\n### Component Architecture\n- **Layout Components**: Fixed sidebar navigation with responsive topbar\n- **Feature Components**: Modular components for each domain (clients, templates, plans, appointments)\n- **UI Components**: Reusable shadcn/ui components with consistent styling\n- **Form Components**: Validated forms with error handling and optimistic updates\n- **Common Components**: Shared utilities like empty states, confirmation dialogs, and loading states\n\n### Development Patterns\n- **File Organization**: Feature-based folder structure with shared utilities\n- **Type Safety**: Comprehensive TypeScript usage with Zod schema validation\n- **Error Handling**: Graceful error boundaries with user-friendly messages\n- **Performance**: Optimized with React Query caching and lazy loading\n- **Testing**: Test-friendly component structure with data-testid attributes\n\n## External Dependencies\n\n### Database & ORM\n- **PostgreSQL**: Primary database with Neon Database serverless integration\n- **Drizzle ORM**: Type-safe database operations with schema migrations\n- **Drizzle Kit**: Database schema management and migration tools\n\n### UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **shadcn/ui**: High-quality React components built on Radix UI primitives\n- **Radix UI**: Unstyled, accessible UI primitives for complex components\n- **Lucide React**: Consistent icon library for the entire application\n\n### State & Forms\n- **TanStack Query**: Server state management with caching, synchronization, and background updates\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Zod**: Runtime type validation for forms and API responses\n- **Zustand**: Lightweight state management for UI state\n\n### Date & Internationalization\n- **date-fns**: Modern date utility library with Turkish locale support\n- **Turkish Locale**: Full Turkish language support for dates, formatting, and UI text\n\n### Development Tools\n- **Vite**: Fast build tool with HMR and optimized production builds\n- **ESLint & Prettier**: Code quality and formatting tools\n- **TypeScript**: Static type checking for enhanced developer experience\n- **Replit Integration**: Development environment optimized for Replit deployment\n\n### Runtime & Deployment\n- **Express.js**: Web application framework for Node.js\n- **Node.js**: JavaScript runtime for server-side operations\n- **Environment Variables**: Configuration management for different deployment environments","size_bytes":4594},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Source Serif Pro\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"IBM Plex Mono\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2837},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertClientSchema, \n  insertTemplateSchema, \n  insertDietPlanSchema, \n  insertAppointmentSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Client routes\n  app.get(\"/api/clients\", async (req, res) => {\n    try {\n      const { search, page, pageSize } = req.query;\n      const result = await storage.getClients({\n        search: search as string,\n        page: page ? parseInt(page as string) : undefined,\n        pageSize: pageSize ? parseInt(pageSize as string) : undefined,\n      });\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", async (req, res) => {\n    try {\n      const validatedData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(validatedData);\n      res.status(201).json(client);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid client data\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const validatedData = insertClientSchema.partial().parse(req.body);\n      const client = await storage.updateClient(req.params.id, validatedData);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid client data\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteClient(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json({ message: \"Client deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete client\" });\n    }\n  });\n\n  // Template routes\n  app.get(\"/api/templates\", async (req, res) => {\n    try {\n      const templates = await storage.getTemplates();\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch templates\" });\n    }\n  });\n\n  app.get(\"/api/templates/:id\", async (req, res) => {\n    try {\n      const template = await storage.getTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch template\" });\n    }\n  });\n\n  app.post(\"/api/templates\", async (req, res) => {\n    try {\n      const validatedData = insertTemplateSchema.parse(req.body);\n      const template = await storage.createTemplate(validatedData);\n      res.status(201).json(template);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid template data\" });\n    }\n  });\n\n  app.put(\"/api/templates/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTemplateSchema.partial().parse(req.body);\n      const template = await storage.updateTemplate(req.params.id, validatedData);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid template data\" });\n    }\n  });\n\n  app.delete(\"/api/templates/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteTemplate(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      res.json({ message: \"Template deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete template\" });\n    }\n  });\n\n  // Diet Plan routes\n  app.get(\"/api/plans\", async (req, res) => {\n    try {\n      const { clientId } = req.query;\n      const plans = await storage.getPlans({ \n        clientId: clientId as string \n      });\n      res.json(plans);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch plans\" });\n    }\n  });\n\n  app.get(\"/api/plans/:id\", async (req, res) => {\n    try {\n      const plan = await storage.getPlan(req.params.id);\n      if (!plan) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch plan\" });\n    }\n  });\n\n  app.post(\"/api/plans\", async (req, res) => {\n    try {\n      const validatedData = insertDietPlanSchema.parse(req.body);\n      const plan = await storage.createPlan(validatedData);\n      res.status(201).json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid plan data\" });\n    }\n  });\n\n  app.put(\"/api/plans/:id\", async (req, res) => {\n    try {\n      const validatedData = insertDietPlanSchema.partial().parse(req.body);\n      const plan = await storage.updatePlan(req.params.id, validatedData);\n      if (!plan) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n      res.json(plan);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid plan data\" });\n    }\n  });\n\n  app.delete(\"/api/plans/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePlan(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Plan not found\" });\n      }\n      res.json({ message: \"Plan deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete plan\" });\n    }\n  });\n\n  // Appointment routes\n  app.get(\"/api/appointments\", async (req, res) => {\n    try {\n      const { clientId, from, to } = req.query;\n      const appointments = await storage.getAppointments({\n        clientId: clientId as string,\n        from: from as string,\n        to: to as string,\n      });\n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch appointments\" });\n    }\n  });\n\n  app.get(\"/api/appointments/:id\", async (req, res) => {\n    try {\n      const appointment = await storage.getAppointment(req.params.id);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      res.json(appointment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch appointment\" });\n    }\n  });\n\n  app.post(\"/api/appointments\", async (req, res) => {\n    try {\n      const validatedData = insertAppointmentSchema.parse(req.body);\n      const appointment = await storage.createAppointment(validatedData);\n      res.status(201).json(appointment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid appointment data\" });\n    }\n  });\n\n  app.put(\"/api/appointments/:id\", async (req, res) => {\n    try {\n      const validatedData = insertAppointmentSchema.partial().parse(req.body);\n      const appointment = await storage.updateAppointment(req.params.id, validatedData);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      res.json(appointment);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid appointment data\" });\n    }\n  });\n\n  app.delete(\"/api/appointments/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deleteAppointment(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      res.json({ message: \"Appointment deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete appointment\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8049},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Client, \n  type InsertClient,\n  type Template,\n  type InsertTemplate,\n  type DietPlan,\n  type InsertDietPlan,\n  type Appointment,\n  type InsertAppointment\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Client methods\n  getClients(params?: { search?: string; page?: number; pageSize?: number }): Promise<{ clients: Client[]; total: number }>;\n  getClient(id: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, client: Partial<InsertClient>): Promise<Client | undefined>;\n  deleteClient(id: string): Promise<boolean>;\n\n  // Template methods\n  getTemplates(): Promise<Template[]>;\n  getTemplate(id: string): Promise<Template | undefined>;\n  createTemplate(template: InsertTemplate): Promise<Template>;\n  updateTemplate(id: string, template: Partial<InsertTemplate>): Promise<Template | undefined>;\n  deleteTemplate(id: string): Promise<boolean>;\n\n  // Diet Plan methods\n  getPlans(params?: { clientId?: string }): Promise<DietPlan[]>;\n  getPlan(id: string): Promise<DietPlan | undefined>;\n  createPlan(plan: InsertDietPlan): Promise<DietPlan>;\n  updatePlan(id: string, plan: Partial<InsertDietPlan>): Promise<DietPlan | undefined>;\n  deletePlan(id: string): Promise<boolean>;\n\n  // Appointment methods\n  getAppointments(params?: { clientId?: string; from?: string; to?: string }): Promise<Appointment[]>;\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment | undefined>;\n  deleteAppointment(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private clients: Map<string, Client>;\n  private templates: Map<string, Template>;\n  private plans: Map<string, DietPlan>;\n  private appointments: Map<string, Appointment>;\n\n  constructor() {\n    this.users = new Map();\n    this.clients = new Map();\n    this.templates = new Map();\n    this.plans = new Map();\n    this.appointments = new Map();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Client methods\n  async getClients(params?: { search?: string; page?: number; pageSize?: number }): Promise<{ clients: Client[]; total: number }> {\n    let clients = Array.from(this.clients.values());\n    \n    if (params?.search) {\n      // Normalize and prepare search term for better Unicode and Turkish character handling\n      const normalizeText = (text: string) => text.normalize('NFC').toLowerCase().trim();\n      const search = normalizeText(params.search);\n      \n      clients = clients.filter(client => {\n        const firstName = normalizeText(client.firstName);\n        const lastName = normalizeText(client.lastName);\n        const fullName = normalizeText(`${client.firstName} ${client.lastName}`);\n        const email = client.email ? normalizeText(client.email) : '';\n        const phone = client.phone || '';\n        \n        return firstName.includes(search) ||\n               lastName.includes(search) ||\n               fullName.includes(search) ||\n               email.includes(search) ||\n               phone.includes(search);\n      });\n    }\n\n    const total = clients.length;\n    \n    if (params?.page && params?.pageSize) {\n      const start = (params.page - 1) * params.pageSize;\n      clients = clients.slice(start, start + params.pageSize);\n    }\n\n    return { clients, total };\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    return this.clients.get(id);\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const id = randomUUID();\n    const now = new Date();\n    const client: Client = { \n      ...insertClient, \n      id,\n      email: insertClient.email ?? null,\n      phone: insertClient.phone ?? null,\n      birthDate: insertClient.birthDate ?? null,\n      notes: insertClient.notes ?? null,\n      goals: insertClient.goals ?? null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.clients.set(id, client);\n    return client;\n  }\n\n  async updateClient(id: string, updateData: Partial<InsertClient>): Promise<Client | undefined> {\n    const client = this.clients.get(id);\n    if (!client) return undefined;\n\n    const updatedClient = { \n      ...client, \n      ...updateData, \n      updatedAt: new Date() \n    };\n    this.clients.set(id, updatedClient);\n    return updatedClient;\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    return this.clients.delete(id);\n  }\n\n  // Template methods\n  async getTemplates(): Promise<Template[]> {\n    return Array.from(this.templates.values());\n  }\n\n  async getTemplate(id: string): Promise<Template | undefined> {\n    return this.templates.get(id);\n  }\n\n  async createTemplate(insertTemplate: InsertTemplate): Promise<Template> {\n    const id = randomUUID();\n    const now = new Date();\n    const template: Template = { \n      ...insertTemplate, \n      id,\n      description: insertTemplate.description ?? null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.templates.set(id, template);\n    return template;\n  }\n\n  async updateTemplate(id: string, updateData: Partial<InsertTemplate>): Promise<Template | undefined> {\n    const template = this.templates.get(id);\n    if (!template) return undefined;\n\n    const updatedTemplate = { \n      ...template, \n      ...updateData, \n      updatedAt: new Date() \n    };\n    this.templates.set(id, updatedTemplate);\n    return updatedTemplate;\n  }\n\n  async deleteTemplate(id: string): Promise<boolean> {\n    return this.templates.delete(id);\n  }\n\n  // Diet Plan methods\n  async getPlans(params?: { clientId?: string }): Promise<DietPlan[]> {\n    let plans = Array.from(this.plans.values());\n    \n    if (params?.clientId) {\n      plans = plans.filter(plan => plan.clientId === params.clientId);\n    }\n\n    return plans;\n  }\n\n  async getPlan(id: string): Promise<DietPlan | undefined> {\n    return this.plans.get(id);\n  }\n\n  async createPlan(insertPlan: InsertDietPlan): Promise<DietPlan> {\n    const id = randomUUID();\n    const now = new Date();\n    const plan: DietPlan = { \n      ...insertPlan, \n      id,\n      notes: insertPlan.notes ?? null,\n      createdAt: now,\n      updatedAt: now\n    };\n    this.plans.set(id, plan);\n    return plan;\n  }\n\n  async updatePlan(id: string, updateData: Partial<InsertDietPlan>): Promise<DietPlan | undefined> {\n    const plan = this.plans.get(id);\n    if (!plan) return undefined;\n\n    const updatedPlan = { \n      ...plan, \n      ...updateData, \n      updatedAt: new Date() \n    };\n    this.plans.set(id, updatedPlan);\n    return updatedPlan;\n  }\n\n  async deletePlan(id: string): Promise<boolean> {\n    return this.plans.delete(id);\n  }\n\n  // Appointment methods\n  async getAppointments(params?: { clientId?: string; from?: string; to?: string }): Promise<Appointment[]> {\n    let appointments = Array.from(this.appointments.values());\n    \n    if (params?.clientId) {\n      appointments = appointments.filter(apt => apt.clientId === params.clientId);\n    }\n\n    if (params?.from || params?.to) {\n      appointments = appointments.filter(apt => {\n        const aptDate = apt.startsAt;\n        if (params.from && aptDate < new Date(params.from)) return false;\n        if (params.to && aptDate > new Date(params.to)) return false;\n        return true;\n      });\n    }\n\n    return appointments.sort((a, b) => a.startsAt.getTime() - b.startsAt.getTime());\n  }\n\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    return this.appointments.get(id);\n  }\n\n  async createAppointment(insertAppointment: InsertAppointment): Promise<Appointment> {\n    const id = randomUUID();\n    const now = new Date();\n    const appointment: Appointment = { \n      ...insertAppointment, \n      id,\n      description: insertAppointment.description ?? null,\n      status: insertAppointment.status ?? \"scheduled\",\n      createdAt: now,\n      updatedAt: now\n    };\n    this.appointments.set(id, appointment);\n    return appointment;\n  }\n\n  async updateAppointment(id: string, updateData: Partial<InsertAppointment>): Promise<Appointment | undefined> {\n    const appointment = this.appointments.get(id);\n    if (!appointment) return undefined;\n\n    const updatedAppointment = { \n      ...appointment, \n      ...updateData, \n      updatedAt: new Date() \n    };\n    this.appointments.set(id, updatedAppointment);\n    return updatedAppointment;\n  }\n\n  async deleteAppointment(id: string): Promise<boolean> {\n    return this.appointments.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9286},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  birthDate: date(\"birth_date\"),\n  notes: text(\"notes\"),\n  goals: text(\"goals\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const templates = pgTable(\"templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  sections: jsonb(\"sections\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const dietPlans = pgTable(\"diet_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  templateId: varchar(\"template_id\").notNull(),\n  name: text(\"name\").notNull(),\n  dateStart: date(\"date_start\").notNull(),\n  dateEnd: date(\"date_end\").notNull(),\n  notes: text(\"notes\"),\n  sections: jsonb(\"sections\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  startsAt: timestamp(\"starts_at\").notNull(),\n  endsAt: timestamp(\"ends_at\").notNull(),\n  status: text(\"status\").notNull().default(\"scheduled\"), // scheduled, done, canceled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTemplateSchema = createInsertSchema(templates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDietPlanSchema = createInsertSchema(dietPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments)\n  .omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n  })\n  .extend({\n    startsAt: z.coerce.date(),\n    endsAt: z.coerce.date(),\n    status: z.enum([\"scheduled\", \"done\", \"canceled\"]).default(\"scheduled\"),\n  });\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Client = typeof clients.$inferSelect;\n\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\nexport type Template = typeof templates.$inferSelect;\n\nexport type InsertDietPlan = z.infer<typeof insertDietPlanSchema>;\nexport type DietPlan = typeof dietPlans.$inferSelect;\n\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\n\n// Template section types\nexport type TemplateSection = {\n  id: string;\n  title: \"Kahvaltı\" | \"Öğle\" | \"Akşam\" | \"Ara Öğün\";\n  items: TemplateItem[];\n};\n\nexport type TemplateItem = {\n  id: string;\n  label: string;\n  amount?: string;\n  note?: string;\n  calories?: number;\n};\n\nexport type AppointmentStatus = \"scheduled\" | \"done\" | \"canceled\";\n","size_bytes":3931},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Clients from \"@/pages/clients\";\nimport Templates from \"@/pages/templates\";\nimport Plans from \"@/pages/plans\";\nimport Appointments from \"@/pages/appointments\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/clients\" component={Clients} />\n      <Route path=\"/templates\" component={Templates} />\n      <Route path=\"/plans\" component={Plans} />\n      <Route path=\"/appointments\" component={Appointments} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"system\" storageKey=\"nutrisyonel-theme\">\n        <TooltipProvider>\n          <AppLayout>\n            <Router />\n          </AppLayout>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1367},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --card: hsl(180 6.6667% 97.0588%);\n  --ring: hsl(166.76, 29.82%, 44.71%);\n  --input: hsl(35.29, 11.41%, 70.78%);\n  --muted: hsl(72, 12.82%, 84.71%);\n  --accent: hsl(292.13, 48.03%, 75.1%);\n  --border: hsl(35, 10.53%, 77.65%);\n  --radius: 0.875rem;\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --popover: hsl(0 0% 100%);\n  --primary: hsl(165.65, 26.44%, 65.88%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --background: hsl(70.91, 21.57%, 90%);\n  --font-serif: 'Source Serif Pro', serif;\n  --foreground: hsl(0, 0%, 8.24%);\n  --destructive: hsl(0.49, 54.19%, 55.49%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --muted-foreground: hsl(72, 2.39%, 40.98%);\n  --accent-foreground: hsl(0, 0%, 8.24%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary-foreground: hsl(0, 0%, 8.24%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --secondary: hsl(0, 0%, 8.24%);\n  --secondary-foreground: hsl(70.91, 21.57%, 90%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --font-sans: 'Inter', sans-serif;\n  --font-mono: 'IBM Plex Mono', monospace;\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --spacing: 0.25rem;\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n}\n\n.dark {\n  --card: hsl(228 9.8039% 10%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --muted: hsl(0 0% 9.4118%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --popover: hsl(0 0% 0%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary-foreground: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --radius: 1.3rem;\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --spacing: 0.25rem;\n  --font-mono: Menlo, monospace;\n  --font-sans: Open Sans, sans-serif;\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --font-serif: Georgia, serif;\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --tracking-normal: 0em;\n  --destructive-foreground: hsl(0 0% 100%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@media print {\n  .no-print { display: none !important; }\n  .print-only { display: block !important; }\n  body { background: white !important; color: black !important; }\n  .bg-card { background: white !important; }\n  .border { border-color: #ccc !important; }\n}\n\n.print-only { display: none; }\n","size_bytes":5397},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}\n","size_bytes":1578},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || \"/api\";\n\nexport const api = {\n  // Client endpoints\n  getClients: (params?: { search?: string; page?: number; pageSize?: number }) => {\n    const searchParams = new URLSearchParams();\n    if (params?.search) searchParams.set(\"search\", params.search);\n    if (params?.page) searchParams.set(\"page\", params.page.toString());\n    if (params?.pageSize) searchParams.set(\"pageSize\", params.pageSize.toString());\n    \n    return fetch(`${API_BASE_URL}/clients?${searchParams.toString()}`).then(res => res.json());\n  },\n  \n  getClient: (id: string) => \n    fetch(`${API_BASE_URL}/clients/${id}`).then(res => res.json()),\n  \n  createClient: (data: any) => \n    apiRequest(\"POST\", `${API_BASE_URL}/clients`, data).then(res => res.json()),\n  \n  updateClient: (id: string, data: any) => \n    apiRequest(\"PUT\", `${API_BASE_URL}/clients/${id}`, data).then(res => res.json()),\n  \n  deleteClient: (id: string) => \n    apiRequest(\"DELETE\", `${API_BASE_URL}/clients/${id}`).then(res => res.json()),\n\n  // Template endpoints\n  getTemplates: () => \n    fetch(`${API_BASE_URL}/templates`).then(res => res.json()),\n  \n  getTemplate: (id: string) => \n    fetch(`${API_BASE_URL}/templates/${id}`).then(res => res.json()),\n  \n  createTemplate: (data: any) => \n    apiRequest(\"POST\", `${API_BASE_URL}/templates`, data).then(res => res.json()),\n  \n  updateTemplate: (id: string, data: any) => \n    apiRequest(\"PUT\", `${API_BASE_URL}/templates/${id}`, data).then(res => res.json()),\n  \n  deleteTemplate: (id: string) => \n    apiRequest(\"DELETE\", `${API_BASE_URL}/templates/${id}`).then(res => res.json()),\n\n  // Diet Plan endpoints\n  getPlans: (params?: { clientId?: string }) => {\n    const searchParams = new URLSearchParams();\n    if (params?.clientId) searchParams.set(\"clientId\", params.clientId);\n    \n    return fetch(`${API_BASE_URL}/plans?${searchParams.toString()}`).then(res => res.json());\n  },\n  \n  getPlan: (id: string) => \n    fetch(`${API_BASE_URL}/plans/${id}`).then(res => res.json()),\n  \n  createPlan: (data: any) => \n    apiRequest(\"POST\", `${API_BASE_URL}/plans`, data).then(res => res.json()),\n  \n  updatePlan: (id: string, data: any) => \n    apiRequest(\"PUT\", `${API_BASE_URL}/plans/${id}`, data).then(res => res.json()),\n  \n  deletePlan: (id: string) => \n    apiRequest(\"DELETE\", `${API_BASE_URL}/plans/${id}`).then(res => res.json()),\n\n  // Appointment endpoints\n  getAppointments: (params?: { clientId?: string; from?: string; to?: string }) => {\n    const searchParams = new URLSearchParams();\n    if (params?.clientId) searchParams.set(\"clientId\", params.clientId);\n    if (params?.from) searchParams.set(\"from\", params.from);\n    if (params?.to) searchParams.set(\"to\", params.to);\n    \n    return fetch(`${API_BASE_URL}/appointments?${searchParams.toString()}`).then(res => res.json());\n  },\n  \n  getAppointment: (id: string) => \n    fetch(`${API_BASE_URL}/appointments/${id}`).then(res => res.json()),\n  \n  createAppointment: (data: any) => \n    apiRequest(\"POST\", `${API_BASE_URL}/appointments`, data).then(res => res.json()),\n  \n  updateAppointment: (id: string, data: any) => \n    apiRequest(\"PUT\", `${API_BASE_URL}/appointments/${id}`, data).then(res => res.json()),\n  \n  deleteAppointment: (id: string) => \n    apiRequest(\"DELETE\", `${API_BASE_URL}/appointments/${id}`).then(res => res.json()),\n};\n","size_bytes":3409},"client/src/lib/constants.ts":{"content":"// Turkish UI Strings\nexport const UI_STRINGS = {\n  // Navigation\n  NAV: {\n    DASHBOARD: \"Genel Bakış\",\n    CLIENTS: \"Danışanlar\", \n    TEMPLATES: \"Şablonlar\",\n    PLANS: \"Diyet Planları\",\n    APPOINTMENTS: \"Randevular\",\n    ANALYTICS: \"Analitik\",\n    SETTINGS: \"Ayarlar\",\n  },\n\n  // Common Actions\n  ACTIONS: {\n    CREATE: \"Oluştur\",\n    EDIT: \"Düzenle\",\n    DELETE: \"Sil\",\n    SAVE: \"Kaydet\",\n    CANCEL: \"İptal\",\n    VIEW: \"Görüntüle\",\n    PRINT: \"Yazdır\",\n    EXPORT: \"Dışa Aktar\",\n    SEARCH: \"Ara\",\n    FILTER: \"Filtrele\",\n    ADD: \"Ekle\",\n    REMOVE: \"Kaldır\",\n  },\n\n  // Form Labels\n  FORMS: {\n    FIRST_NAME: \"Ad\",\n    LAST_NAME: \"Soyad\", \n    EMAIL: \"Email\",\n    PHONE: \"Telefon\",\n    BIRTH_DATE: \"Doğum Tarihi\",\n    NOTES: \"Notlar\",\n    GOALS: \"Hedefler\",\n    NAME: \"Ad\",\n    DESCRIPTION: \"Açıklama\",\n    START_DATE: \"Başlangıç Tarihi\",\n    END_DATE: \"Bitiş Tarihi\",\n    TITLE: \"Başlık\",\n    STATUS: \"Durum\",\n  },\n\n  // Status Labels\n  STATUS: {\n    ACTIVE: \"Aktif\",\n    INACTIVE: \"Pasif\",\n    COMPLETED: \"Tamamlanmış\",\n    PENDING: \"Beklemede\",\n    SCHEDULED: \"Planlandı\",\n    DONE: \"Tamamlandı\",\n    CANCELED: \"İptal Edildi\",\n  },\n\n  // Messages\n  MESSAGES: {\n    SUCCESS: {\n      CLIENT_CREATED: \"Danışan başarıyla eklendi.\",\n      CLIENT_UPDATED: \"Danışan başarıyla güncellendi.\",\n      CLIENT_DELETED: \"Danışan başarıyla silindi.\",\n      TEMPLATE_CREATED: \"Şablon başarıyla oluşturuldu.\",\n      TEMPLATE_UPDATED: \"Şablon başarıyla güncellendi.\",\n      TEMPLATE_DELETED: \"Şablon başarıyla silindi.\",\n      PLAN_CREATED: \"Diyet planı başarıyla oluşturuldu.\",\n      PLAN_UPDATED: \"Diyet planı başarıyla güncellendi.\",\n      PLAN_DELETED: \"Diyet planı başarıyla silindi.\",\n      APPOINTMENT_CREATED: \"Randevu başarıyla oluşturuldu.\",\n      APPOINTMENT_UPDATED: \"Randevu başarıyla güncellendi.\",\n      APPOINTMENT_DELETED: \"Randevu başarıyla silindi.\",\n    },\n    ERROR: {\n      GENERIC: \"Bir hata oluştu.\",\n      CLIENT_CREATE: \"Danışan eklenirken bir hata oluştu.\",\n      CLIENT_UPDATE: \"Danışan güncellenirken bir hata oluştu.\",\n      CLIENT_DELETE: \"Danışan silinirken bir hata oluştu.\",\n      TEMPLATE_CREATE: \"Şablon oluşturulurken bir hata oluştu.\",\n      TEMPLATE_UPDATE: \"Şablon güncellenirken bir hata oluştu.\",\n      TEMPLATE_DELETE: \"Şablon silinirken bir hata oluştu.\",\n      PLAN_CREATE: \"Diyet planı oluşturulurken bir hata oluştu.\",\n      PLAN_UPDATE: \"Diyet planı güncellenirken bir hata oluştu.\",\n      PLAN_DELETE: \"Diyet planı silinirken bir hata oluştu.\",\n      APPOINTMENT_CREATE: \"Randevu oluşturulurken bir hata oluştu.\",\n      APPOINTMENT_UPDATE: \"Randevu güncellenirken bir hata oluştu.\",\n      APPOINTMENT_DELETE: \"Randevu silinirken bir hata oluştu.\",\n    },\n    EMPTY_STATES: {\n      NO_CLIENTS: \"Henüz danışan yok\",\n      NO_TEMPLATES: \"Henüz şablon yok\",\n      NO_PLANS: \"Henüz plan yok\",\n      NO_APPOINTMENTS: \"Henüz randevu yok\",\n      NO_APPOINTMENTS_TODAY: \"Bugün için randevu yok\",\n    },\n  },\n\n  // Placeholders\n  PLACEHOLDERS: {\n    SEARCH_CLIENTS: \"Ad, email veya telefon ile ara...\",\n    SEARCH_GENERAL: \"Danışan ara...\",\n    TEMPLATE_DESCRIPTION: \"Bu şablon hakkında kısa bir açıklama...\",\n    NOTES: \"Notlar...\",\n    ADD_ITEM: \"+ Öğe Ekle\",\n    ITEM_NAME: \"Öğe adı\",\n    AMOUNT: \"Miktar\",\n  },\n};\n\n// Meal Types\nexport const MEAL_TYPES = [\n  { value: \"Kahvaltı\", label: \"Kahvaltı\" },\n  { value: \"Öğle\", label: \"Öğle\" },\n  { value: \"Akşam\", label: \"Akşam\" },\n  { value: \"Ara Öğün\", label: \"Ara Öğün\" },\n] as const;\n\n// Appointment Status Options\nexport const APPOINTMENT_STATUSES = [\n  { value: \"scheduled\", label: \"Planlandı\" },\n  { value: \"done\", label: \"Tamamlandı\" },\n  { value: \"canceled\", label: \"İptal Edildi\" },\n] as const;\n\n// Client Status Options\nexport const CLIENT_STATUSES = [\n  { value: \"all\", label: \"Tüm Durumlar\" },\n  { value: \"active\", label: \"Aktif\" },\n  { value: \"inactive\", label: \"Pasif\" },\n  { value: \"completed\", label: \"Tamamlanmış\" },\n] as const;\n\n// Pagination\nexport const PAGINATION = {\n  DEFAULT_PAGE_SIZE: 10,\n  PAGE_SIZE_OPTIONS: [5, 10, 20, 50],\n};\n\n// Date Formats\nexport const DATE_FORMATS = {\n  DISPLAY: \"d MMMM yyyy\",\n  INPUT: \"yyyy-MM-dd\",\n  TIME: \"HH:mm\",\n  DATETIME: \"d MMMM yyyy HH:mm\",\n};\n\n// Theme\nexport const THEME = {\n  DEFAULT: \"system\" as const,\n  OPTIONS: [\"light\", \"dark\", \"system\"] as const,\n};\n\n// Environment\nexport const ENV = {\n  API_BASE_URL: import.meta.env.VITE_API_BASE_URL || \"/api\",\n};\n","size_bytes":4548},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport { differenceInYears, format } from \"date-fns\"\nimport { tr } from \"date-fns/locale\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// Date utilities\nexport function calculateAge(birthDate: string | Date): number {\n  const birth = typeof birthDate === \"string\" ? new Date(birthDate) : birthDate;\n  return differenceInYears(new Date(), birth);\n}\n\nexport function formatDate(date: string | Date, formatStr: string = \"d MMMM yyyy\"): string {\n  const dateObj = typeof date === \"string\" ? new Date(date) : date;\n  return format(dateObj, formatStr, { locale: tr });\n}\n\nexport function formatDateTime(date: string | Date): string {\n  return formatDate(date, \"d MMMM yyyy HH:mm\");\n}\n\nexport function formatTime(date: string | Date): string {\n  return formatDate(date, \"HH:mm\");\n}\n\n// String utilities\nexport function getInitials(firstName: string, lastName: string): string {\n  return `${firstName.charAt(0).toUpperCase()}${lastName.charAt(0).toUpperCase()}`;\n}\n\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + \"...\";\n}\n\n// Array utilities\nexport function groupBy<T>(array: T[], key: keyof T): Record<string, T[]> {\n  return array.reduce((groups, item) => {\n    const groupKey = String(item[key]);\n    groups[groupKey] = groups[groupKey] || [];\n    groups[groupKey].push(item);\n    return groups;\n  }, {} as Record<string, T[]>);\n}\n\n// Validation utilities\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nexport function isValidPhone(phone: string): boolean {\n  const phoneRegex = /^(\\+90|0)?[1-9][0-9]{9}$/;\n  return phoneRegex.test(phone.replace(/\\s/g, \"\"));\n}\n\n// Color utilities for avatars\nexport function getColorFromString(str: string): string {\n  const colors = [\n    \"bg-red-100 text-red-600\",\n    \"bg-blue-100 text-blue-600\", \n    \"bg-green-100 text-green-600\",\n    \"bg-yellow-100 text-yellow-600\",\n    \"bg-purple-100 text-purple-600\",\n    \"bg-pink-100 text-pink-600\",\n    \"bg-indigo-100 text-indigo-600\",\n    \"bg-gray-100 text-gray-600\",\n  ];\n  \n  const hash = str.split(\"\").reduce((a, b) => {\n    a = ((a << 5) - a) + b.charCodeAt(0);\n    return a & a;\n  }, 0);\n  \n  return colors[Math.abs(hash) % colors.length];\n}\n\n// Number utilities\nexport function formatCalories(calories: number): string {\n  return `${calories.toLocaleString(\"tr-TR\")} kcal`;\n}\n\nexport function formatDuration(minutes: number): string {\n  if (minutes < 60) {\n    return `${minutes} dakika`;\n  }\n  const hours = Math.floor(minutes / 60);\n  const remainingMinutes = minutes % 60;\n  \n  if (remainingMinutes === 0) {\n    return `${hours} saat`;\n  }\n  \n  return `${hours} saat ${remainingMinutes} dakika`;\n}\n\n// Local storage utilities\nexport function getStorageItem<T>(key: string, defaultValue: T): T {\n  try {\n    const item = localStorage.getItem(key);\n    return item ? JSON.parse(item) : defaultValue;\n  } catch {\n    return defaultValue;\n  }\n}\n\nexport function setStorageItem<T>(key: string, value: T): void {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch {\n    // Handle storage errors silently\n  }\n}\n\nexport function removeStorageItem(key: string): void {\n  try {\n    localStorage.removeItem(key);\n  } catch {\n    // Handle storage errors silently\n  }\n}\n\n// Debounce utility\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(() => func(...args), delay);\n  };\n}\n\n// URL utilities\nexport function buildQueryString(params: Record<string, string | number | boolean | undefined>): string {\n  const searchParams = new URLSearchParams();\n  \n  Object.entries(params).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== \"\") {\n      searchParams.set(key, String(value));\n    }\n  });\n  \n  const queryString = searchParams.toString();\n  return queryString ? `?${queryString}` : \"\";\n}\n\n// Copy to clipboard\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","size_bytes":4451},"client/src/lib/validators.ts":{"content":"import { z } from \"zod\";\nimport { insertClientSchema, insertTemplateSchema, insertDietPlanSchema, insertAppointmentSchema } from \"@shared/schema\";\n\n// Client form validation\nexport const clientFormSchema = insertClientSchema.extend({\n  email: z.string().email(\"Geçerli bir email adresi girin\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  birthDate: z.string().optional(),\n  notes: z.string().optional(),\n  goals: z.array(z.string()).optional(),\n});\n\n// Template form validation\nexport const templateFormSchema = insertTemplateSchema.extend({\n  name: z.string().min(1, \"Şablon adı gereklidir\"),\n  description: z.string().optional(),\n  sections: z.array(z.object({\n    id: z.string(),\n    title: z.enum([\"Kahvaltı\", \"Öğle\", \"Akşam\", \"Ara Öğün\"]),\n    items: z.array(z.object({\n      id: z.string(),\n      label: z.string().min(1, \"Öğe adı gereklidir\"),\n      amount: z.string().optional(),\n      note: z.string().optional(),\n      calories: z.number().optional(),\n    })),\n  })),\n});\n\n// Diet plan form validation\nexport const planFormSchema = insertDietPlanSchema.extend({\n  name: z.string().min(1, \"Plan adı gereklidir\"),\n  clientId: z.string().min(1, \"Danışan seçimi gereklidir\"),\n  templateId: z.string().min(1, \"Şablon seçimi gereklidir\"),\n  dateStart: z.string().min(1, \"Başlangıç tarihi gereklidir\"),\n  dateEnd: z.string().min(1, \"Bitiş tarihi gereklidir\"),\n  notes: z.string().optional(),\n  sections: z.array(z.object({\n    id: z.string(),\n    title: z.enum([\"Kahvaltı\", \"Öğle\", \"Akşam\", \"Ara Öğün\"]),\n    items: z.array(z.object({\n      id: z.string(),\n      label: z.string(),\n      amount: z.string().optional(),\n      note: z.string().optional(),\n      calories: z.number().optional(),\n    })),\n  })),\n});\n\n// Appointment form validation\nexport const appointmentFormSchema = insertAppointmentSchema.extend({\n  title: z.string().min(1, \"Randevu başlığı gereklidir\"),\n  clientId: z.string().min(1, \"Danışan seçimi gereklidir\"),\n  startsAt: z.string().min(1, \"Başlangıç tarihi gereklidir\"),\n  endsAt: z.string().min(1, \"Bitiş tarihi gereklidir\"),\n  description: z.string().optional(),\n  status: z.enum([\"scheduled\", \"done\", \"canceled\"]).default(\"scheduled\"),\n});\n\n// Search and filter validation\nexport const searchSchema = z.object({\n  query: z.string().optional(),\n  page: z.number().min(1).optional(),\n  pageSize: z.number().min(1).max(100).optional(),\n  status: z.enum([\"all\", \"active\", \"inactive\", \"completed\"]).optional(),\n});\n\nexport const dateRangeSchema = z.object({\n  from: z.string().optional(),\n  to: z.string().optional(),\n});\n","size_bytes":2608},"client/src/pages/appointments.tsx":{"content":"import { useState } from \"react\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport AppointmentCalendar from \"@/components/appointments/AppointmentCalendar\";\n\nexport default function Appointments() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">Randevu Takvimu</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Randevularınızı planlayın ve yönetin\n          </p>\n        </div>\n        <Button data-testid=\"button-new-appointment\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Randevu Ekle\n        </Button>\n      </div>\n\n      {/* Calendar */}\n      <Card className=\"p-6\">\n        <AppointmentCalendar />\n      </Card>\n    </div>\n  );\n}\n","size_bytes":903},"client/src/pages/clients.tsx":{"content":"import { useState } from \"react\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport ClientTable from \"@/components/clients/ClientTable\";\nimport ClientForm from \"@/components/clients/ClientForm\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nexport default function Clients() {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">Danışanlar</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Tüm danışanlarınızı görüntüleyin ve yönetin\n          </p>\n        </div>\n        <Button \n          onClick={() => setIsCreateModalOpen(true)}\n          data-testid=\"button-new-client\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Yeni Danışan\n        </Button>\n      </div>\n\n      {/* Clients Table */}\n      <Card className=\"p-6\">\n        <ClientTable />\n      </Card>\n\n      {/* Create Client Modal */}\n      <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Yeni Danışan Ekle</DialogTitle>\n          </DialogHeader>\n          <ClientForm onSuccess={() => setIsCreateModalOpen(false)} />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":1551},"client/src/pages/dashboard.tsx":{"content":"import { BarChart3, Calendar, ClipboardList, FileText, Users } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport ClientTable from \"@/components/clients/ClientTable\";\n\nconst stats = [\n  {\n    title: \"Toplam Danışan\",\n    value: \"0\",\n    change: \"+0 bu hafta\",\n    icon: Users,\n    color: \"text-primary bg-primary/10\",\n  },\n  {\n    title: \"Aktif Planlar\",\n    value: \"0\",\n    change: \"+0 bu hafta\",\n    icon: ClipboardList,\n    color: \"text-chart-2 bg-chart-2/10\",\n  },\n  {\n    title: \"Bu Hafta Randevu\",\n    value: \"0\",\n    change: \"0 bugün\",\n    icon: Calendar,\n    color: \"text-chart-3 bg-chart-3/10\",\n  },\n  {\n    title: \"Şablon Sayısı\",\n    value: \"0\",\n    change: \"0 yeni şablon\",\n    icon: FileText,\n    color: \"text-chart-4 bg-chart-4/10\",\n  },\n];\n\nexport default function Dashboard() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat) => (\n          <Card key={stat.title} className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  {stat.title}\n                </p>\n                <p className=\"text-3xl font-bold\" data-testid={`stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {stat.value}\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {stat.change}\n                </p>\n              </div>\n              <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${stat.color}`}>\n                <stat.icon className=\"w-6 h-6\" />\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {/* Recent Clients */}\n      <Card className=\"p-6\">\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold\">Son Danışanlar</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Yakın zamanda eklenen danışanlarınız\n          </p>\n        </div>\n        <ClientTable limit={5} />\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2178},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/plans.tsx":{"content":"import { useState } from \"react\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { usePlans } from \"@/lib/hooks/usePlans\";\nimport PlanCard from \"@/components/plans/PlanCard\";\nimport PlanPreview from \"@/components/plans/PlanPreview\";\nimport EmptyState from \"@/components/common/EmptyState\";\n\nexport default function Plans() {\n  const [selectedPlanId, setSelectedPlanId] = useState<string | null>(null);\n  const { data: plans, isLoading } = usePlans();\n\n  if (isLoading) {\n    return <div>Yükleniyor...</div>;\n  }\n\n  const selectedPlan = plans?.find((p: any) => p.id === selectedPlanId);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">Diyet Planları</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Danışanlarınız için oluşturulmuş aktif diyet planları\n          </p>\n        </div>\n        <Button data-testid=\"button-new-plan\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Yeni Plan Oluştur\n        </Button>\n      </div>\n\n      {/* Plans Grid */}\n      {plans && plans.length > 0 ? (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {plans.map((plan: any) => (\n            <PlanCard \n              key={plan.id} \n              plan={plan} \n              onViewDetails={() => setSelectedPlanId(plan.id)}\n            />\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-12\">\n          <EmptyState\n            title=\"Henüz plan yok\"\n            description=\"İlk diyet planınızı oluşturarak başlayın\"\n            action={\n              <Button>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Yeni Plan Oluştur\n              </Button>\n            }\n          />\n        </Card>\n      )}\n\n      {/* Plan Preview */}\n      {selectedPlan && (\n        <Card className=\"p-6\">\n          <PlanPreview \n            plan={selectedPlan} \n            onClose={() => setSelectedPlanId(null)} \n          />\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":2178},"client/src/pages/templates.tsx":{"content":"import { useState } from \"react\";\nimport { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useTemplates } from \"@/lib/hooks/useTemplates\";\nimport TemplateCard from \"@/components/templates/TemplateCard\";\nimport TemplateBuilder from \"@/components/templates/TemplateBuilder\";\nimport EmptyState from \"@/components/common/EmptyState\";\n\nexport default function Templates() {\n  const [isBuilderOpen, setIsBuilderOpen] = useState(false);\n  const { data: templates, isLoading } = useTemplates();\n\n  if (isLoading) {\n    return <div>Yükleniyor...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold\">Diyet Şablonları</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Yeniden kullanılabilir diyet şablonlarınızı oluşturun ve yönetin\n          </p>\n        </div>\n        <Button \n          onClick={() => setIsBuilderOpen(true)}\n          data-testid=\"button-new-template\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Yeni Şablon\n        </Button>\n      </div>\n\n      {/* Template Grid */}\n      {templates && templates.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {templates.map((template: any) => (\n            <TemplateCard key={template.id} template={template} />\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-12\">\n          <EmptyState\n            title=\"Henüz şablon yok\"\n            description=\"İlk diyet şablonunuzu oluşturarak başlayın\"\n            action={\n              <Button onClick={() => setIsBuilderOpen(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Yeni Şablon Oluştur\n              </Button>\n            }\n          />\n        </Card>\n      )}\n\n      {/* Template Builder */}\n      {isBuilderOpen && (\n        <Card className=\"p-6\">\n          <TemplateBuilder onClose={() => setIsBuilderOpen(false)} />\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":2153},"client/src/store/ui.ts":{"content":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\ninterface UIState {\n  // Sidebar state\n  sidebarCollapsed: boolean;\n  setSidebarCollapsed: (collapsed: boolean) => void;\n  \n  // Modal states\n  modals: {\n    createClient: boolean;\n    editClient: boolean;\n    createTemplate: boolean;\n    editTemplate: boolean;\n    createPlan: boolean;\n    editPlan: boolean;\n    createAppointment: boolean;\n    editAppointment: boolean;\n    confirmDelete: boolean;\n  };\n  openModal: (modalName: keyof UIState[\"modals\"]) => void;\n  closeModal: (modalName: keyof UIState[\"modals\"]) => void;\n  closeAllModals: () => void;\n  \n  // Filter states\n  clientFilter: {\n    search: string;\n    status: string;\n    page: number;\n    pageSize: number;\n  };\n  setClientFilter: (filter: Partial<UIState[\"clientFilter\"]>) => void;\n  resetClientFilter: () => void;\n  \n  // Template builder state\n  templateBuilder: {\n    isOpen: boolean;\n    templateId?: string;\n  };\n  openTemplateBuilder: (templateId?: string) => void;\n  closeTemplateBuilder: () => void;\n  \n  // Plan preview state\n  planPreview: {\n    isOpen: boolean;\n    planId?: string;\n  };\n  openPlanPreview: (planId: string) => void;\n  closePlanPreview: () => void;\n  \n  // Calendar view state\n  calendarView: \"week\" | \"month\";\n  setCalendarView: (view: \"week\" | \"month\") => void;\n  \n  // Selected items for bulk actions\n  selectedClients: string[];\n  setSelectedClients: (clientIds: string[]) => void;\n  toggleClientSelection: (clientId: string) => void;\n  clearSelectedClients: () => void;\n  \n  // Notification state\n  notifications: Array<{\n    id: string;\n    title: string;\n    message: string;\n    type: \"info\" | \"success\" | \"warning\" | \"error\";\n    timestamp: Date;\n    read: boolean;\n  }>;\n  addNotification: (notification: Omit<UIState[\"notifications\"][0], \"id\" | \"timestamp\" | \"read\">) => void;\n  markNotificationAsRead: (id: string) => void;\n  clearNotifications: () => void;\n  \n  // Loading states\n  loading: {\n    clients: boolean;\n    templates: boolean;\n    plans: boolean;\n    appointments: boolean;\n  };\n  setLoading: (key: keyof UIState[\"loading\"], isLoading: boolean) => void;\n}\n\nconst defaultModalState = {\n  createClient: false,\n  editClient: false,\n  createTemplate: false,\n  editTemplate: false,\n  createPlan: false,\n  editPlan: false,\n  createAppointment: false,\n  editAppointment: false,\n  confirmDelete: false,\n};\n\nconst defaultClientFilter = {\n  search: \"\",\n  status: \"all\",\n  page: 1,\n  pageSize: 10,\n};\n\nconst defaultLoadingState = {\n  clients: false,\n  templates: false,\n  plans: false,\n  appointments: false,\n};\n\nexport const useUIStore = create<UIState>()(\n  persist(\n    (set, get) => ({\n      // Sidebar state\n      sidebarCollapsed: false,\n      setSidebarCollapsed: (collapsed) => \n        set({ sidebarCollapsed: collapsed }),\n      \n      // Modal states\n      modals: defaultModalState,\n      openModal: (modalName) =>\n        set((state) => ({\n          modals: { ...state.modals, [modalName]: true },\n        })),\n      closeModal: (modalName) =>\n        set((state) => ({\n          modals: { ...state.modals, [modalName]: false },\n        })),\n      closeAllModals: () =>\n        set({ modals: defaultModalState }),\n      \n      // Filter states\n      clientFilter: defaultClientFilter,\n      setClientFilter: (filter) =>\n        set((state) => ({\n          clientFilter: { ...state.clientFilter, ...filter },\n        })),\n      resetClientFilter: () =>\n        set({ clientFilter: defaultClientFilter }),\n      \n      // Template builder state\n      templateBuilder: {\n        isOpen: false,\n        templateId: undefined,\n      },\n      openTemplateBuilder: (templateId) =>\n        set({\n          templateBuilder: { isOpen: true, templateId },\n        }),\n      closeTemplateBuilder: () =>\n        set({\n          templateBuilder: { isOpen: false, templateId: undefined },\n        }),\n      \n      // Plan preview state\n      planPreview: {\n        isOpen: false,\n        planId: undefined,\n      },\n      openPlanPreview: (planId) =>\n        set({\n          planPreview: { isOpen: true, planId },\n        }),\n      closePlanPreview: () =>\n        set({\n          planPreview: { isOpen: false, planId: undefined },\n        }),\n      \n      // Calendar view state\n      calendarView: \"week\",\n      setCalendarView: (view) => set({ calendarView: view }),\n      \n      // Selected items for bulk actions\n      selectedClients: [],\n      setSelectedClients: (clientIds) => \n        set({ selectedClients: clientIds }),\n      toggleClientSelection: (clientId) =>\n        set((state) => {\n          const selected = state.selectedClients;\n          const isSelected = selected.includes(clientId);\n          return {\n            selectedClients: isSelected\n              ? selected.filter(id => id !== clientId)\n              : [...selected, clientId],\n          };\n        }),\n      clearSelectedClients: () => set({ selectedClients: [] }),\n      \n      // Notification state\n      notifications: [],\n      addNotification: (notification) =>\n        set((state) => ({\n          notifications: [\n            {\n              ...notification,\n              id: Math.random().toString(36).substr(2, 9),\n              timestamp: new Date(),\n              read: false,\n            },\n            ...state.notifications,\n          ].slice(0, 50), // Keep only the latest 50 notifications\n        })),\n      markNotificationAsRead: (id) =>\n        set((state) => ({\n          notifications: state.notifications.map(n =>\n            n.id === id ? { ...n, read: true } : n\n          ),\n        })),\n      clearNotifications: () => set({ notifications: [] }),\n      \n      // Loading states\n      loading: defaultLoadingState,\n      setLoading: (key, isLoading) =>\n        set((state) => ({\n          loading: { ...state.loading, [key]: isLoading },\n        })),\n    }),\n    {\n      name: \"nutrisyonel-ui-store\",\n      partialize: (state) => ({\n        sidebarCollapsed: state.sidebarCollapsed,\n        clientFilter: state.clientFilter,\n        calendarView: state.calendarView,\n      }),\n    }\n  )\n);\n\n// Selectors for easier access\nexport const useModalState = () => useUIStore((state) => state.modals);\nexport const useClientFilter = () => useUIStore((state) => state.clientFilter);\nexport const useSelectedClients = () => useUIStore((state) => state.selectedClients);\nexport const useNotifications = () => useUIStore((state) => state.notifications);\nexport const useLoadingState = () => useUIStore((state) => state.loading);\n","size_bytes":6516},"client/src/components/appointments/AppointmentCalendar.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { useAppointments } from \"@/lib/hooks/useAppointments\";\nimport { format, startOfWeek, addDays, addWeeks, subWeeks, startOfMonth, endOfMonth, eachDayOfInterval, addMonths, subMonths, isSameMonth } from \"date-fns\";\nimport { tr } from \"date-fns/locale\";\n\nexport default function AppointmentCalendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [view, setView] = useState<\"week\" | \"month\">(\"week\");\n  \n  const weekStart = startOfWeek(currentDate, { weekStartsOn: 1 });\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n  \n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const monthDays = eachDayOfInterval({ start: monthStart, end: monthEnd });\n  \n  // Calculate the full calendar grid for month view (6 weeks)\n  const calendarStart = startOfWeek(monthStart, { weekStartsOn: 1 });\n  const calendarEnd = addDays(calendarStart, 41); // 6 weeks = 42 days\n  const calendarDays = eachDayOfInterval({ start: calendarStart, end: calendarEnd });\n  \n  const { data: appointments, isLoading } = useAppointments({\n    from: view === \"week\" ? format(weekStart, \"yyyy-MM-dd\") : format(calendarStart, \"yyyy-MM-dd\"),\n    to: view === \"week\" ? format(addDays(weekStart, 6), \"yyyy-MM-dd\") : format(calendarEnd, \"yyyy-MM-dd\"),\n  });\n\n  const timeSlots = Array.from({ length: 10 }, (_, i) => \n    `${String(9 + i).padStart(2, \"0\")}:00`\n  );\n\n  const navigate = (direction: \"prev\" | \"next\") => {\n    setCurrentDate(prev => {\n      if (view === \"week\") {\n        return direction === \"next\" ? addWeeks(prev, 1) : subWeeks(prev, 1);\n      } else {\n        return direction === \"next\" ? addMonths(prev, 1) : subMonths(prev, 1);\n      }\n    });\n  };\n\n  const goToToday = () => {\n    setCurrentDate(new Date());\n  };\n\n  if (isLoading) {\n    return <div>Yükleniyor...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Calendar Controls */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <h4 className=\"text-xl font-semibold\">\n            {format(currentDate, \"MMMM yyyy\", { locale: tr })}\n          </h4>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={() => navigate(\"prev\")}\n              data-testid={`button-prev-${view}`}\n            >\n              <ChevronLeft className=\"w-4 h-4\" />\n            </Button>\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={() => navigate(\"next\")}\n              data-testid={`button-next-${view}`}\n            >\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex rounded-md border border-border\">\n            <Button\n              variant={view === \"week\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setView(\"week\")}\n              className=\"rounded-r-none\"\n              data-testid=\"button-week-view\"\n            >\n              Haftalık\n            </Button>\n            <Button\n              variant={view === \"month\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setView(\"month\")}\n              className=\"rounded-l-none\"\n              data-testid=\"button-month-view\"\n            >\n              Aylık\n            </Button>\n          </div>\n          <Button variant=\"outline\" onClick={goToToday} data-testid=\"button-today\">\n            Bugün\n          </Button>\n        </div>\n      </div>\n\n      {/* Weekly Calendar View */}\n      {view === \"week\" && (\n        <Card className=\"overflow-hidden\">\n          {/* Calendar Header */}\n          <div className=\"grid grid-cols-8 border-b border-border\">\n            <div className=\"p-4 border-r border-border\"></div>\n            {weekDays.map((day, index) => {\n              const isToday = format(day, \"yyyy-MM-dd\") === format(new Date(), \"yyyy-MM-dd\");\n              return (\n                <div\n                  key={index}\n                  className={`p-4 border-r border-border text-center last:border-r-0 ${\n                    isToday ? \"bg-primary/5\" : \"\"\n                  }`}\n                >\n                  <div className={`text-sm ${isToday ? \"text-primary\" : \"text-muted-foreground\"}`}>\n                    {format(day, \"E\", { locale: tr })}\n                  </div>\n                  <div className={`text-lg font-semibold ${isToday ? \"text-primary\" : \"\"}`}>\n                    {format(day, \"d\")}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Time Slots */}\n          <div className=\"grid grid-cols-8\">\n            {timeSlots.map((time, timeIndex) => (\n              <div key={timeIndex} className=\"contents\">\n                <div className=\"p-3 border-r border-b border-border text-sm text-muted-foreground text-right\">\n                  {time}\n                </div>\n                {weekDays.map((day, dayIndex) => {\n                  const isToday = format(day, \"yyyy-MM-dd\") === format(new Date(), \"yyyy-MM-dd\");\n                  const dayAppointments = appointments?.filter((apt: any) => \n                    format(new Date(apt.startsAt), \"yyyy-MM-dd\") === format(day, \"yyyy-MM-dd\") &&\n                    format(new Date(apt.startsAt), \"HH\") === time.split(\":\")[0]\n                  ) || [];\n\n                  return (\n                    <div\n                      key={`${timeIndex}-${dayIndex}`}\n                      className={`p-2 border-r border-b border-border min-h-[80px] last:border-r-0 ${\n                        isToday ? \"bg-primary/5\" : \"\"\n                      }`}\n                    >\n                      {dayAppointments.map((appointment: any) => (\n                        <div\n                          key={appointment.id}\n                          className=\"bg-chart-2/10 border border-chart-2 rounded p-2 text-xs mb-2\"\n                          data-testid={`appointment-${appointment.id}`}\n                        >\n                          <div className=\"font-medium text-chart-2\">\n                            {appointment.title}\n                          </div>\n                          <div className=\"text-muted-foreground\">\n                            {format(new Date(appointment.startsAt), \"HH:mm\")} - {format(new Date(appointment.endsAt), \"HH:mm\")}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {/* Monthly Calendar View */}\n      {view === \"month\" && (\n        <Card className=\"overflow-hidden\">\n          {/* Month Header - Days of Week */}\n          <div className=\"grid grid-cols-7 border-b border-border\">\n            {[\"Pzt\", \"Sal\", \"Çar\", \"Per\", \"Cum\", \"Cmt\", \"Paz\"].map((dayName, index) => (\n              <div\n                key={index}\n                className=\"p-4 text-center text-sm font-medium text-muted-foreground border-r border-border last:border-r-0\"\n              >\n                {dayName}\n              </div>\n            ))}\n          </div>\n\n          {/* Month Grid */}\n          <div className=\"grid grid-cols-7\">\n            {calendarDays.map((day, index) => {\n              const isToday = format(day, \"yyyy-MM-dd\") === format(new Date(), \"yyyy-MM-dd\");\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const dayAppointments = appointments?.filter((apt: any) => \n                format(new Date(apt.startsAt), \"yyyy-MM-dd\") === format(day, \"yyyy-MM-dd\")\n              ) || [];\n\n              return (\n                <div\n                  key={index}\n                  className={`min-h-[120px] p-2 border-r border-b border-border last:border-r-0 ${\n                    isToday ? \"bg-primary/5\" : \"\"\n                  } ${!isCurrentMonth ? \"bg-muted/30\" : \"\"}`}\n                  data-testid={`day-${format(day, \"yyyy-MM-dd\")}`}\n                >\n                  {/* Day Number */}\n                  <div className={`text-sm font-medium mb-2 ${\n                    isToday \n                      ? \"bg-primary text-primary-foreground w-6 h-6 rounded-full flex items-center justify-center\" \n                      : isCurrentMonth \n                        ? \"text-foreground\" \n                        : \"text-muted-foreground\"\n                  }`}>\n                    {format(day, \"d\")}\n                  </div>\n\n                  {/* Appointments */}\n                  <div className=\"space-y-1\">\n                    {dayAppointments.slice(0, 3).map((appointment: any) => (\n                      <div\n                        key={appointment.id}\n                        className=\"bg-chart-2/10 border border-chart-2 rounded px-2 py-1 text-xs\"\n                        data-testid={`month-appointment-${appointment.id}`}\n                      >\n                        <div className=\"font-medium text-chart-2 truncate\">\n                          {appointment.title}\n                        </div>\n                        <div className=\"text-muted-foreground\">\n                          {format(new Date(appointment.startsAt), \"HH:mm\")}\n                        </div>\n                      </div>\n                    ))}\n                    {dayAppointments.length > 3 && (\n                      <div className=\"text-xs text-muted-foreground\">\n                        +{dayAppointments.length - 3} daha\n                      </div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </Card>\n      )}\n\n      {/* Today's Appointments */}\n      <Card className=\"p-6\">\n        <h4 className=\"font-semibold mb-4\">Bugünün Randevuları</h4>\n        <div className=\"space-y-3\">\n          {appointments && appointments.length > 0 ? (\n            appointments\n              .filter((apt: any) => format(new Date(apt.startsAt), \"yyyy-MM-dd\") === format(new Date(), \"yyyy-MM-dd\"))\n              .map((appointment: any) => (\n                <div\n                  key={appointment.id}\n                  className=\"flex items-center justify-between p-3 bg-card rounded-lg border border-border\"\n                  data-testid={`today-appointment-${appointment.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-3 h-3 bg-chart-2 rounded-full\"></div>\n                    <div>\n                      <div className=\"font-medium\">{appointment.title}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {appointment.description || \"Açıklama yok\"}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium\">\n                      {format(new Date(appointment.startsAt), \"HH:mm\")} - {format(new Date(appointment.endsAt), \"HH:mm\")}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {Math.round((new Date(appointment.endsAt).getTime() - new Date(appointment.startsAt).getTime()) / (1000 * 60))} dakika\n                    </div>\n                  </div>\n                </div>\n              ))\n          ) : (\n            <div className=\"text-center text-muted-foreground py-8\">\n              Bugün için randevu yok\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11861},"client/src/components/clients/ClientForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useClientMutations } from \"@/lib/hooks/useClients\";\nimport { clientFormSchema } from \"@/lib/validators\";\nimport type { z } from \"zod\";\n\ntype ClientFormData = z.infer<typeof clientFormSchema>;\n\ninterface ClientFormProps {\n  onSuccess?: () => void;\n}\n\nexport default function ClientForm({ onSuccess }: ClientFormProps) {\n  const { createClient } = useClientMutations();\n  \n  const form = useForm<ClientFormData>({\n    resolver: zodResolver(clientFormSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      notes: \"\",\n      goals: [],\n    },\n  });\n\n  const onSubmit = async (data: ClientFormData) => {\n    try {\n      await createClient.mutateAsync(data);\n      form.reset();\n      onSuccess?.();\n    } catch (error) {\n      console.error(\"Failed to create client:\", error);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"firstName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Ad</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-first-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"lastName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Soyad</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-last-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type=\"email\" {...field} data-testid=\"input-email\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Telefon</FormLabel>\n              <FormControl>\n                <Input {...field} data-testid=\"input-phone\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Notlar</FormLabel>\n              <FormControl>\n                <Textarea {...field} rows={3} data-testid=\"textarea-notes\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end gap-3 pt-4\">\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={() => form.reset()}\n            data-testid=\"button-cancel\"\n          >\n            İptal\n          </Button>\n          <Button \n            type=\"submit\" \n            disabled={createClient.isPending}\n            data-testid=\"button-save-client\"\n          >\n            {createClient.isPending ? \"Kaydediliyor...\" : \"Kaydet\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":3886},"client/src/components/clients/ClientTable.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Filter, Eye, Edit, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useClients } from \"@/lib/hooks/useClients\";\nimport { calculateAge } from \"@/lib/utils\";\nimport EmptyState from \"@/components/common/EmptyState\";\nimport ConfirmDialog from \"@/components/common/ConfirmDialog\";\n\ninterface ClientTableProps {\n  limit?: number;\n}\n\nexport default function ClientTable({ limit }: ClientTableProps) {\n  const [search, setSearch] = useState(\"\");\n  const [page] = useState(1);\n  const [deleteClientId, setDeleteClientId] = useState<string | null>(null);\n  \n  const { data, isLoading } = useClients({ \n    search, \n    page, \n    pageSize: limit || 10 \n  });\n\n  const clients = data?.clients || [];\n  const total = data?.total || 0;\n\n  if (isLoading) {\n    return <div>Yükleniyor...</div>;\n  }\n\n  if (clients.length === 0 && !search) {\n    return (\n      <EmptyState\n        title=\"Henüz danışan yok\"\n        description=\"İlk danışanınızı ekleyerek başlayın\"\n      />\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {!limit && (\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Ad, email veya telefon ile ara...\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-client-search\"\n              />\n            </div>\n          </div>\n          <Select>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n              <SelectValue placeholder=\"Tüm Durumlar\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Tüm Durumlar</SelectItem>\n              <SelectItem value=\"active\">Aktif</SelectItem>\n              <SelectItem value=\"inactive\">Pasif</SelectItem>\n              <SelectItem value=\"completed\">Tamamlanmış</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" size=\"icon\">\n            <Filter className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      )}\n\n      <div className=\"border rounded-md\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {!limit && (\n                <TableHead className=\"w-12\">\n                  <Checkbox />\n                </TableHead>\n              )}\n              <TableHead>Danışan</TableHead>\n              <TableHead>İletişim</TableHead>\n              <TableHead>Yaş</TableHead>\n              <TableHead>Aktif Plan</TableHead>\n              <TableHead>Son Randevu</TableHead>\n              <TableHead>Durum</TableHead>\n              <TableHead>İşlemler</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {clients.map((client: any) => (\n              <TableRow key={client.id} data-testid={`row-client-${client.id}`}>\n                {!limit && (\n                  <TableCell>\n                    <Checkbox />\n                  </TableCell>\n                )}\n                <TableCell>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-medium text-primary\">\n                        {client.firstName[0]}{client.lastName[0]}\n                      </span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\" data-testid={`text-client-name-${client.id}`}>\n                        {client.firstName} {client.lastName}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {client.goals?.join(\", \") || \"Hedef belirlenmemiş\"}\n                      </p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <p className=\"text-sm\" data-testid={`text-client-email-${client.id}`}>\n                      {client.email || \"Email yok\"}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`text-client-phone-${client.id}`}>\n                      {client.phone || \"Telefon yok\"}\n                    </p>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">\n                    {client.birthDate ? calculateAge(client.birthDate) : \"Bilinmiyor\"}\n                  </span>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Plan atanmamış\n                  </span>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm text-muted-foreground\">\n                    Henüz randevu yok\n                  </span>\n                </TableCell>\n                <TableCell>\n                  <Badge variant=\"outline\" className=\"bg-muted text-muted-foreground\">\n                    Beklemede\n                  </Badge>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center gap-2\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\"\n                      data-testid={`button-view-client-${client.id}`}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\"\n                      data-testid={`button-edit-client-${client.id}`}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\"\n                      onClick={() => setDeleteClientId(client.id)}\n                      data-testid={`button-delete-client-${client.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4 text-destructive\" />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {!limit && total > 10 && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            1-{Math.min(10, total)} / {total} danışan gösteriliyor\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" size=\"sm\" disabled>\n              Önceki\n            </Button>\n            <Button variant=\"default\" size=\"sm\">1</Button>\n            <Button variant=\"outline\" size=\"sm\">2</Button>\n            <Button variant=\"outline\" size=\"sm\">3</Button>\n            <Button variant=\"outline\" size=\"sm\">\n              Sonraki\n            </Button>\n          </div>\n        </div>\n      )}\n\n      <ConfirmDialog\n        isOpen={!!deleteClientId}\n        onClose={() => setDeleteClientId(null)}\n        onConfirm={() => {\n          // TODO: Implement delete\n          setDeleteClientId(null);\n        }}\n        title=\"Danışanı sil\"\n        description=\"Bu danışanı silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.\"\n      />\n    </div>\n  );\n}\n","size_bytes":7957},"client/src/components/common/ConfirmDialog.tsx":{"content":"import {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ConfirmDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title: string;\n  description: string;\n  confirmText?: string;\n  cancelText?: string;\n}\n\nexport default function ConfirmDialog({\n  isOpen,\n  onClose,\n  onConfirm,\n  title,\n  description,\n  confirmText = \"Sil\",\n  cancelText = \"İptal\",\n}: ConfirmDialogProps) {\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onClose}>\n      <AlertDialogContent data-testid=\"confirm-dialog\">\n        <AlertDialogHeader>\n          <AlertDialogTitle data-testid=\"confirm-dialog-title\">\n            {title}\n          </AlertDialogTitle>\n          <AlertDialogDescription data-testid=\"confirm-dialog-description\">\n            {description}\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel onClick={onClose} data-testid=\"button-cancel\">\n            {cancelText}\n          </AlertDialogCancel>\n          <AlertDialogAction \n            onClick={onConfirm} \n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            data-testid=\"button-confirm\"\n          >\n            {confirmText}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n","size_bytes":1513},"client/src/components/common/EmptyState.tsx":{"content":"import { ReactNode } from \"react\";\n\ninterface EmptyStateProps {\n  title: string;\n  description: string;\n  action?: ReactNode;\n  icon?: ReactNode;\n}\n\nexport default function EmptyState({ title, description, action, icon }: EmptyStateProps) {\n  return (\n    <div className=\"text-center py-12\">\n      {icon && <div className=\"mb-4 flex justify-center\">{icon}</div>}\n      <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"empty-state-title\">\n        {title}\n      </h3>\n      <p className=\"text-muted-foreground mb-6 max-w-sm mx-auto\" data-testid=\"empty-state-description\">\n        {description}\n      </p>\n      {action && <div>{action}</div>}\n    </div>\n  );\n}\n","size_bytes":666},"client/src/components/layout/AppLayout.tsx":{"content":"import Sidebar from \"./Sidebar\";\nimport TopBar from \"./TopBar\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AppLayout({ children }: AppLayoutProps) {\n  return (\n    <div className=\"min-h-screen\">\n      <Sidebar />\n      <main className=\"pl-72\">\n        <TopBar />\n        <div className=\"p-6\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":402},"client/src/components/layout/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  Users, \n  FileText, \n  ClipboardList, \n  Calendar,\n  BarChart3,\n  Settings,\n  Utensils,\n  MoreHorizontal\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: \"Genel Bakış\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Danışanlar\", href: \"/clients\", icon: Users, count: 0 },\n  { name: \"Şablonlar\", href: \"/templates\", icon: FileText },\n  { name: \"Diyet Planları\", href: \"/plans\", icon: ClipboardList },\n  { name: \"Randevular\", href: \"/appointments\", icon: Calendar },\n];\n\nconst secondaryNavigation = [\n  { name: \"Analitik\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Ayarlar\", href: \"/settings\", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"fixed inset-y-0 left-0 z-50 w-72 bg-card border-r border-border no-print\">\n      <div className=\"flex h-full flex-col\">\n        {/* Logo/Brand */}\n        <div className=\"flex h-16 shrink-0 items-center px-6 border-b border-border\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Utensils className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <span className=\"text-xl font-semibold\">Nutrisyonel</span>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <div className=\"flex-1 px-4 py-6\">\n          <nav className=\"space-y-2\">\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={cn(\n                    \"flex items-center gap-3 px-3 py-2 text-sm font-medium rounded-md transition-colors\",\n                    isActive \n                      ? \"bg-accent text-accent-foreground\" \n                      : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                  )}\n                  data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <item.icon className=\"w-4 h-4\" />\n                  {item.name}\n                  {item.count !== undefined && (\n                    <span className=\"ml-auto bg-primary/10 text-primary px-2 py-0.5 text-xs rounded-full\">\n                      {item.count}\n                    </span>\n                  )}\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* Secondary Navigation */}\n          <div className=\"mt-8 pt-8 border-t border-border\">\n            <h3 className=\"px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-3\">\n              Araçlar\n            </h3>\n            <nav className=\"space-y-1\">\n              {secondaryNavigation.map((item) => {\n                const isActive = location === item.href;\n                return (\n                  <Link\n                    key={item.name}\n                    href={item.href}\n                    className={cn(\n                      \"flex items-center gap-3 px-3 py-2 text-sm font-medium rounded-md transition-colors\",\n                      isActive \n                        ? \"bg-accent text-accent-foreground\" \n                        : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                    )}\n                    data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <item.icon className=\"w-4 h-4\" />\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n        </div>\n\n        {/* User Profile */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-primary-foreground\">AY</span>\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium truncate\">Ayşe Yılmaz</p>\n              <p className=\"text-xs text-muted-foreground truncate\">Diyetisyen</p>\n            </div>\n            <button className=\"p-1.5 rounded-md hover:bg-accent transition-colors\">\n              <MoreHorizontal className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4550},"client/src/components/layout/TopBar.tsx":{"content":"import { Search, Bell, Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport default function TopBar() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <header className=\"sticky top-0 z-40 border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 no-print\">\n      <div className=\"flex h-16 items-center justify-between px-6\">\n        <div className=\"flex items-center gap-4\">\n          <h1 className=\"text-2xl font-semibold\">Genel Bakış</h1>\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Danışan ara...\"\n              className=\"w-80 pl-10\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          \n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n            <Bell className=\"w-5 h-5\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full\"></span>\n          </Button>\n\n          {/* Theme Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n            data-testid=\"button-theme-toggle\"\n          >\n            <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n            <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n            <span className=\"sr-only\">Tema değiştir</span>\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1972},"client/src/components/plans/PlanCard.tsx":{"content":"import { Eye, Printer, Edit } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { DietPlan } from \"@shared/schema\";\nimport { format, differenceInDays } from \"date-fns\";\nimport { tr } from \"date-fns/locale\";\n\ninterface PlanCardProps {\n  plan: DietPlan;\n  onViewDetails: () => void;\n}\n\nexport default function PlanCard({ plan, onViewDetails }: PlanCardProps) {\n  const startDate = new Date(plan.dateStart);\n  const endDate = new Date(plan.dateEnd);\n  const totalDays = differenceInDays(endDate, startDate) + 1;\n  const daysPassed = Math.max(0, differenceInDays(new Date(), startDate));\n  const progress = Math.min(100, (daysPassed / totalDays) * 100);\n\n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n            <span className=\"text-sm font-medium text-primary\">\n              {/* TODO: Get client initials */}\n              DN\n            </span>\n          </div>\n          <div>\n            <h4 className=\"font-semibold\" data-testid={`text-plan-name-${plan.id}`}>\n              {plan.name}\n            </h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Danışan ID: {plan.clientId}\n            </p>\n          </div>\n        </div>\n        <div className=\"flex gap-1\">\n          <Button \n            variant=\"ghost\" \n            size=\"icon\" \n            onClick={onViewDetails}\n            data-testid={`button-view-plan-${plan.id}`}\n          >\n            <Eye className=\"w-4 h-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            onClick={() => window.print()}\n            data-testid={`button-print-plan-${plan.id}`}\n          >\n            <Printer className=\"w-4 h-4\" />\n          </Button>\n          <Button \n            variant=\"ghost\" \n            size=\"icon\"\n            data-testid={`button-edit-plan-${plan.id}`}\n          >\n            <Edit className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n      \n      <div className=\"space-y-3 mb-4\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-muted-foreground\">Başlangıç:</span>\n          <span>{format(startDate, \"d MMMM yyyy\", { locale: tr })}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-muted-foreground\">Bitiş:</span>\n          <span>{format(endDate, \"d MMMM yyyy\", { locale: tr })}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-muted-foreground\">Süre:</span>\n          <span>{totalDays} gün</span>\n        </div>\n      </div>\n\n      <div className=\"mb-4\">\n        <div className=\"flex justify-between text-sm mb-1\">\n          <span>İlerleme</span>\n          <span>{daysPassed}/{totalDays} gün</span>\n        </div>\n        <Progress value={progress} className=\"h-2\" />\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <Badge variant=\"outline\" className=\"bg-chart-2/10 text-chart-2 border-chart-2\">\n          Aktif\n        </Badge>\n        <Button variant=\"ghost\" onClick={onViewDetails} className=\"text-sm\">\n          Detayları Görüntüle\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3543},"client/src/components/plans/PlanPreview.tsx":{"content":"import { X, Printer, Sunrise, Sun, Moon, Coffee } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport type { DietPlan, TemplateSection } from \"@shared/schema\";\nimport { format } from \"date-fns\";\nimport { tr } from \"date-fns/locale\";\n\ninterface PlanPreviewProps {\n  plan: DietPlan;\n  onClose: () => void;\n}\n\nexport default function PlanPreview({ plan, onClose }: PlanPreviewProps) {\n  const sections = plan.sections as TemplateSection[];\n\n  const getMealIcon = (title: TemplateSection[\"title\"]) => {\n    const icons = {\n      \"Kahvaltı\": Sunrise,\n      \"Öğle\": Sun,\n      \"Akşam\": Moon,\n      \"Ara Öğün\": Coffee,\n    };\n    return icons[title] || Sunrise;\n  };\n\n  const getMealTime = (title: TemplateSection[\"title\"]) => {\n    const times = {\n      \"Kahvaltı\": \"08:00\",\n      \"Öğle\": \"13:00\",\n      \"Akşam\": \"19:00\",\n      \"Ara Öğün\": \"16:00\",\n    };\n    return times[title] || \"\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between no-print\">\n        <h4 className=\"font-semibold\">Plan Önizleme</h4>\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={() => window.print()}\n            data-testid=\"button-print-plan\"\n          >\n            <Printer className=\"w-4 h-4 mr-2\" />\n            Yazdır\n          </Button>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      <Card className=\"p-8 print:shadow-none print:border-none print:bg-white\">\n        {/* Plan Header */}\n        <div className=\"text-center mb-8 border-b border-border pb-6 print:border-black\">\n          <h1 className=\"text-2xl font-bold mb-2\">Kişisel Beslenme Programı</h1>\n          <div className=\"text-sm text-muted-foreground space-y-1\">\n            <p><strong>Plan:</strong> {plan.name}</p>\n            <p><strong>Tarih Aralığı:</strong> {format(new Date(plan.dateStart), \"d MMMM yyyy\", { locale: tr })} - {format(new Date(plan.dateEnd), \"d MMMM yyyy\", { locale: tr })}</p>\n            <p><strong>Hazırlayan:</strong> Dyt. Ayşe Yılmaz</p>\n          </div>\n        </div>\n\n        {/* Daily Plan */}\n        <div className=\"space-y-6\">\n          {sections.map((section) => {\n            const Icon = getMealIcon(section.title);\n            const mealTime = getMealTime(section.title);\n            const totalCalories = section.items.reduce((sum, item) => sum + (item.calories || 0), 0);\n            \n            return (\n              <div key={section.id}>\n                <div className=\"flex items-center gap-2 mb-3 pb-2 border-b border-border print:border-gray-300\">\n                  <Icon className=\"w-5 h-5 text-chart-3 print:hidden\" />\n                  <h3 className=\"text-lg font-semibold\">\n                    {section.title} {mealTime && `(${mealTime})`}\n                  </h3>\n                </div>\n                <ul className=\"space-y-2 text-sm ml-4\">\n                  {section.items.map((item) => (\n                    <li key={item.id} className=\"flex justify-between\">\n                      <span>• {item.label} {item.amount && `(${item.amount})`}</span>\n                      {item.calories && (\n                        <span className=\"text-muted-foreground\">{item.calories} kcal</span>\n                      )}\n                    </li>\n                  ))}\n                </ul>\n                {totalCalories > 0 && (\n                  <div className=\"mt-2 pt-2 border-t border-muted text-sm font-medium\">\n                    <span className=\"float-right\">Toplam: {totalCalories} kcal</span>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Daily Summary */}\n        <div className=\"mt-8 p-4 bg-muted rounded-lg print:bg-gray-100\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"font-semibold\">Günlük Toplam Kalori:</span>\n            <span className=\"text-xl font-bold text-primary\">\n              {sections.reduce((total, section) => \n                total + section.items.reduce((sum, item) => sum + (item.calories || 0), 0), 0\n              )} kcal\n            </span>\n          </div>\n        </div>\n\n        {/* Notes */}\n        {plan.notes && (\n          <div className=\"mt-6 p-4 border border-border rounded-lg print:border-gray-300\">\n            <h4 className=\"font-semibold mb-2\">Notlar:</h4>\n            <p className=\"text-sm text-muted-foreground\">{plan.notes}</p>\n          </div>\n        )}\n\n        {/* Footer */}\n        <div className=\"mt-8 pt-6 border-t border-border text-center text-xs text-muted-foreground print:border-gray-300\">\n          <p>Bu program size özel hazırlanmıştır. Başka kişilerle paylaşmayın.</p>\n          <p className=\"mt-1\">Dyt. Ayşe Yılmaz - Nutrisyonel Danışmanlık</p>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5004},"client/src/components/templates/TemplateBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, X, GripVertical, Sunrise, Sun, Moon, Coffee } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useTemplates } from \"@/lib/hooks/useTemplates\";\nimport { DndContext, closestCenter, type DragEndEvent } from \"@dnd-kit/core\";\nimport { arrayMove, SortableContext, verticalListSortingStrategy, useSortable } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport type { TemplateSection, TemplateItem } from \"@shared/schema\";\n\nconst MEAL_TYPES = [\n  { value: \"Kahvaltı\", label: \"Kahvaltı\", icon: Sunrise },\n  { value: \"Öğle\", label: \"Öğle\", icon: Sun },\n  { value: \"Akşam\", label: \"Akşam\", icon: Moon },\n  { value: \"Ara Öğün\", label: \"Ara Öğün\", icon: Coffee },\n] as const;\n\ninterface TemplateBuilderProps {\n  onClose: () => void;\n}\n\nexport default function TemplateBuilder({ onClose }: TemplateBuilderProps) {\n  const [name, setName] = useState(\"Yeni Diyet Şablonu\");\n  const [description, setDescription] = useState(\"\");\n  const [sections, setSections] = useState<TemplateSection[]>([]);\n  const { createTemplate } = useTemplates();\n\n  const addSection = (title: TemplateSection[\"title\"]) => {\n    const newSection: TemplateSection = {\n      id: Date.now().toString(),\n      title,\n      items: [],\n    };\n    setSections([...sections, newSection]);\n  };\n\n  const removeSection = (sectionId: string) => {\n    setSections(sections.filter(s => s.id !== sectionId));\n  };\n\n  const addItem = (sectionId: string) => {\n    setSections(sections.map(section => {\n      if (section.id === sectionId) {\n        const newItem: TemplateItem = {\n          id: Date.now().toString(),\n          label: \"\",\n          amount: \"\",\n          note: \"\",\n          calories: undefined,\n        };\n        return {\n          ...section,\n          items: [...section.items, newItem],\n        };\n      }\n      return section;\n    }));\n  };\n\n  const updateItem = (sectionId: string, itemId: string, updates: Partial<TemplateItem>) => {\n    setSections(sections.map(section => {\n      if (section.id === sectionId) {\n        return {\n          ...section,\n          items: section.items.map(item => \n            item.id === itemId ? { ...item, ...updates } : item\n          ),\n        };\n      }\n      return section;\n    }));\n  };\n\n  const removeItem = (sectionId: string, itemId: string) => {\n    setSections(sections.map(section => {\n      if (section.id === sectionId) {\n        return {\n          ...section,\n          items: section.items.filter(item => item.id !== itemId),\n        };\n      }\n      return section;\n    }));\n  };\n\n  const handleSave = async () => {\n    if (!name.trim()) return;\n    \n    try {\n      await createTemplate.mutateAsync({\n        name,\n        description,\n        sections,\n      });\n      onClose();\n    } catch (error) {\n      console.error(\"Failed to create template:\", error);\n    }\n  };\n\n  const getMealIcon = (title: TemplateSection[\"title\"]) => {\n    const meal = MEAL_TYPES.find(m => m.value === title);\n    return meal?.icon || Sunrise;\n  };\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    if (!over) return;\n\n    const activeId = active.id as string;\n    const overId = over.id as string;\n\n    if (activeId.startsWith('section-')) {\n      // Handle section reordering\n      const activeSectionId = activeId.replace('section-', '');\n      const overSectionId = overId.replace('section-', '');\n      \n      if (activeSectionId !== overSectionId) {\n        const oldIndex = sections.findIndex(s => s.id === activeSectionId);\n        const newIndex = sections.findIndex(s => s.id === overSectionId);\n        setSections(arrayMove(sections, oldIndex, newIndex));\n      }\n    } else if (activeId.startsWith('item-')) {\n      // Handle item reordering within a section\n      const activeItemId = activeId.replace('item-', '');\n      const overItemId = overId.replace('item-', '');\n      \n      setSections(sections.map(section => {\n        const activeItemIndex = section.items.findIndex(item => item.id === activeItemId);\n        const overItemIndex = section.items.findIndex(item => item.id === overItemId);\n        \n        if (activeItemIndex !== -1 && overItemIndex !== -1) {\n          return {\n            ...section,\n            items: arrayMove(section.items, activeItemIndex, overItemIndex)\n          };\n        }\n        return section;\n      }));\n    }\n  };\n\n  // Sortable Section Component\n  function SortableSection({ section, onRemoveSection, onAddItem, onUpdateItem, onRemoveItem, getMealIcon }: {\n    section: TemplateSection;\n    onRemoveSection: (id: string) => void;\n    onAddItem: (sectionId: string) => void;\n    onUpdateItem: (sectionId: string, itemId: string, updates: Partial<TemplateItem>) => void;\n    onRemoveItem: (sectionId: string, itemId: string) => void;\n    getMealIcon: (title: TemplateSection[\"title\"]) => any;\n  }) {\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: `section-${section.id}` });\n    const style = { transform: CSS.Transform.toString(transform), transition };\n    const Icon = getMealIcon(section.title);\n\n    return (\n      <Card ref={setNodeRef} style={style} className=\"p-3\" data-testid={`section-${section.id}`}>\n        <div className=\"flex items-center justify-between mb-2\">\n          <h5 className=\"font-medium flex items-center gap-2\">\n            <div {...attributes} {...listeners} className=\"cursor-grab active:cursor-grabbing\">\n              <GripVertical className=\"w-4 h-4 text-muted-foreground\" />\n            </div>\n            <Icon className=\"w-4 h-4 text-chart-3\" />\n            {section.title}\n          </h5>\n          <Button variant=\"ghost\" size=\"icon\" onClick={() => onRemoveSection(section.id)} data-testid={`button-remove-section-${section.id}`}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        <SortableContext items={section.items.map(item => `item-${item.id}`)} strategy={verticalListSortingStrategy}>\n          <div className=\"space-y-2\">\n            {section.items.map((item) => (\n              <SortableItem\n                key={item.id}\n                item={item}\n                sectionId={section.id}\n                onUpdateItem={onUpdateItem}\n                onRemoveItem={onRemoveItem}\n              />\n            ))}\n            <Button\n              variant=\"ghost\"\n              className=\"w-full h-8 text-xs text-muted-foreground border border-dashed\"\n              onClick={() => onAddItem(section.id)}\n              data-testid={`button-add-item-${section.id}`}\n            >\n              + Öğe Ekle\n            </Button>\n          </div>\n        </SortableContext>\n      </Card>\n    );\n  }\n\n  // Sortable Item Component\n  function SortableItem({ item, sectionId, onUpdateItem, onRemoveItem }: {\n    item: TemplateItem;\n    sectionId: string;\n    onUpdateItem: (sectionId: string, itemId: string, updates: Partial<TemplateItem>) => void;\n    onRemoveItem: (sectionId: string, itemId: string) => void;\n  }) {\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id: `item-${item.id}` });\n    const style = { transform: CSS.Transform.toString(transform), transition };\n\n    return (\n      <div ref={setNodeRef} style={style} className=\"space-y-2 bg-muted px-3 py-2 rounded\" data-testid={`item-${item.id}`}>\n        <div className=\"flex items-center gap-2\">\n          <div {...attributes} {...listeners} className=\"cursor-grab active:cursor-grabbing\">\n            <GripVertical className=\"w-4 h-4 text-muted-foreground\" />\n          </div>\n          <Input\n            value={item.label}\n            onChange={(e) => onUpdateItem(sectionId, item.id, { label: e.target.value })}\n            placeholder=\"Öğe adı\"\n            className=\"flex-1 h-8\"\n            data-testid={`input-item-label-${item.id}`}\n          />\n          <Input\n            value={item.amount || \"\"}\n            onChange={(e) => onUpdateItem(sectionId, item.id, { amount: e.target.value })}\n            placeholder=\"Miktar\"\n            className=\"w-24 h-8\"\n            data-testid={`input-item-amount-${item.id}`}\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => onRemoveItem(sectionId, item.id)}\n            className=\"h-8 w-8\"\n            data-testid={`button-remove-item-${item.id}`}\n          >\n            <X className=\"w-3 h-3\" />\n          </Button>\n        </div>\n        <div className=\"flex gap-2\">\n          <Input\n            value={item.note || \"\"}\n            onChange={(e) => onUpdateItem(sectionId, item.id, { note: e.target.value })}\n            placeholder=\"Not (opsiyonel)\"\n            className=\"flex-1 h-8 text-sm\"\n            data-testid={`input-item-note-${item.id}`}\n          />\n          <Input\n            type=\"number\"\n            value={item.calories || \"\"}\n            onChange={(e) => onUpdateItem(sectionId, item.id, { calories: e.target.value ? parseInt(e.target.value) : undefined })}\n            placeholder=\"Kalori\"\n            className=\"w-20 h-8 text-sm\"\n            data-testid={`input-item-calories-${item.id}`}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"font-semibold\">Şablon Editörü</h4>\n        <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n          <X className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Builder Panel */}\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Şablon Adı</label>\n            <Input\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              data-testid=\"input-template-name\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Açıklama</label>\n            <Textarea\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              rows={3}\n              placeholder=\"Bu şablon hakkında kısa bir açıklama...\"\n              data-testid=\"textarea-template-description\"\n            />\n          </div>\n\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <label className=\"block text-sm font-medium\">Öğün Bölümleri</label>\n              <Select onValueChange={(value) => addSection(value as TemplateSection[\"title\"])}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Bölüm Ekle\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {MEAL_TYPES.map((meal) => (\n                    <SelectItem key={meal.value} value={meal.value}>\n                      {meal.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n              <SortableContext items={sections.map(s => `section-${s.id}`)} strategy={verticalListSortingStrategy}>\n                <div className=\"space-y-3\">\n                  {sections.map((section) => (\n                    <SortableSection\n                      key={section.id}\n                      section={section}\n                      onRemoveSection={removeSection}\n                      onAddItem={addItem}\n                      onUpdateItem={updateItem}\n                      onRemoveItem={removeItem}\n                      getMealIcon={getMealIcon}\n                    />\n                  ))}\n                </div>\n              </SortableContext>\n            </DndContext>\n          </div>\n        </div>\n\n        {/* Preview Panel */}\n        <div>\n          <h5 className=\"font-medium mb-3\">Önizleme</h5>\n          <Card className=\"p-4 space-y-4\">\n            <div className=\"text-center border-b border-border pb-3\">\n              <h3 className=\"font-semibold\">{name}</h3>\n              {description && (\n                <p className=\"text-sm text-muted-foreground\">{description}</p>\n              )}\n            </div>\n            \n            <div className=\"space-y-3\">\n              {sections.map((section) => {\n                const Icon = getMealIcon(section.title);\n                return (\n                  <div key={section.id}>\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Icon className=\"w-4 h-4 text-chart-3\" />\n                      <h4 className=\"font-medium\">{section.title}</h4>\n                    </div>\n                    <ul className=\"text-sm space-y-1 ml-6\">\n                      {section.items.map((item) => (\n                        <li key={item.id}>\n                          • {item.label} {item.amount && `(${item.amount})`}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                );\n              })}\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end gap-3 pt-6 border-t border-border\">\n        <Button variant=\"outline\" onClick={onClose}>\n          İptal\n        </Button>\n        <Button \n          onClick={handleSave} \n          disabled={!name.trim() || createTemplate.isPending}\n          data-testid=\"button-save-template\"\n        >\n          {createTemplate.isPending ? \"Kaydediliyor...\" : \"Şablonu Kaydet\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13887},"client/src/components/templates/TemplateCard.tsx":{"content":"import { Edit, Copy, Trash2, Utensils, Sunrise, Sun, Moon, Coffee } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport type { Template, TemplateSection } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { tr } from \"date-fns/locale\";\n\ninterface TemplateCardProps {\n  template: Template;\n}\n\nexport default function TemplateCard({ template }: TemplateCardProps) {\n  const sections = template.sections as TemplateSection[];\n\n  const getMealIcon = (title: TemplateSection[\"title\"]) => {\n    const icons = {\n      \"Kahvaltı\": Sunrise,\n      \"Öğle\": Sun,\n      \"Akşam\": Moon,\n      \"Ara Öğün\": Coffee,\n    };\n    return icons[title] || Sunrise;\n  };\n\n  const getSectionColor = (title: TemplateSection[\"title\"]) => {\n    const colors = {\n      \"Kahvaltı\": \"text-chart-3\",\n      \"Öğle\": \"text-chart-3\",\n      \"Akşam\": \"text-chart-3\",\n      \"Ara Öğün\": \"text-chart-3\",\n    };\n    return colors[title] || \"text-chart-3\";\n  };\n\n  return (\n    <Card className=\"p-6 hover:shadow-md transition-shadow\">\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n          <Utensils className=\"w-6 h-6 text-chart-2\" />\n        </div>\n        <div className=\"flex gap-1\">\n          <Button variant=\"ghost\" size=\"icon\" data-testid={`button-edit-template-${template.id}`}>\n            <Edit className=\"w-4 h-4\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon\" data-testid={`button-copy-template-${template.id}`}>\n            <Copy className=\"w-4 h-4\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon\" data-testid={`button-delete-template-${template.id}`}>\n            <Trash2 className=\"w-4 h-4 text-destructive\" />\n          </Button>\n        </div>\n      </div>\n      \n      <h4 className=\"font-semibold mb-2\" data-testid={`text-template-name-${template.id}`}>\n        {template.name}\n      </h4>\n      <p className=\"text-sm text-muted-foreground mb-4\">\n        {template.description || \"Açıklama yok\"}\n      </p>\n      \n      <div className=\"space-y-2 mb-4\">\n        {sections.map((section) => {\n          const Icon = getMealIcon(section.title);\n          const colorClass = getSectionColor(section.title);\n          return (\n            <div key={section.id} className=\"flex items-center gap-2 text-sm\">\n              <Icon className={`w-4 h-4 ${colorClass}`} />\n              <span>{section.title}: {section.items.length} öğe</span>\n            </div>\n          );\n        })}\n      </div>\n      \n      <div className=\"flex justify-between items-center\">\n        <span className=\"text-xs text-muted-foreground\">\n          Son güncelleme: {formatDistanceToNow(new Date(template.updatedAt || Date.now()), { \n            addSuffix: true, \n            locale: tr \n          })}\n        </span>\n        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-chart-2/10 text-chart-2\">\n          0 kez kullanıldı\n        </span>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":3132},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/hooks/useAppointments.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Appointment, InsertAppointment } from \"@shared/schema\";\n\ninterface UseAppointmentsParams {\n  clientId?: string;\n  from?: string;\n  to?: string;\n}\n\nexport function useAppointments(params?: UseAppointmentsParams) {\n  const query = useQuery({\n    queryKey: [\"appointments\", params],\n    queryFn: () => api.getAppointments(params),\n  });\n\n  return query;\n}\n\nexport function useAppointment(id: string) {\n  return useQuery({\n    queryKey: [\"appointments\", id],\n    queryFn: () => api.getAppointment(id),\n    enabled: !!id,\n  });\n}\n\nexport function useAppointmentMutations() {\n  const { toast } = useToast();\n\n  const createAppointment = useMutation({\n    mutationFn: api.createAppointment,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"appointments\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Randevu başarıyla oluşturuldu.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Randevu oluşturulurken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAppointment = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertAppointment> }) => \n      api.updateAppointment(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"appointments\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Randevu başarıyla güncellendi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Randevu güncellenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAppointment = useMutation({\n    mutationFn: api.deleteAppointment,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"appointments\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Randevu başarıyla silindi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Randevu silinirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return {\n    createAppointment,\n    updateAppointment,\n    deleteAppointment,\n  };\n}\n","size_bytes":2386},"client/src/lib/hooks/useClients.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Client, InsertClient } from \"@shared/schema\";\n\ninterface UseClientsParams {\n  search?: string;\n  page?: number;\n  pageSize?: number;\n}\n\nexport function useClients(params?: UseClientsParams) {\n  const query = useQuery({\n    queryKey: [\"clients\", params],\n    queryFn: () => api.getClients(params),\n  });\n\n  return query;\n}\n\nexport function useClient(id: string) {\n  return useQuery({\n    queryKey: [\"clients\", id],\n    queryFn: () => api.getClient(id),\n    enabled: !!id,\n  });\n}\n\nexport function useClientMutations() {\n  const { toast } = useToast();\n\n  const createClient = useMutation({\n    mutationFn: api.createClient,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"clients\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Danışan başarıyla eklendi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Danışan eklenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateClient = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertClient> }) => \n      api.updateClient(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"clients\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Danışan başarıyla güncellendi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Danışan güncellenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteClient = useMutation({\n    mutationFn: api.deleteClient,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"clients\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Danışan başarıyla silindi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Danışan silinirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return {\n    createClient,\n    updateClient,\n    deleteClient,\n  };\n}\n","size_bytes":2272},"client/src/lib/hooks/usePlans.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { DietPlan, InsertDietPlan } from \"@shared/schema\";\n\ninterface UsePlansParams {\n  clientId?: string;\n}\n\nexport function usePlans(params?: UsePlansParams) {\n  const query = useQuery({\n    queryKey: [\"plans\", params],\n    queryFn: () => api.getPlans(params),\n  });\n\n  return query;\n}\n\nexport function usePlan(id: string) {\n  return useQuery({\n    queryKey: [\"plans\", id],\n    queryFn: () => api.getPlan(id),\n    enabled: !!id,\n  });\n}\n\nexport function usePlanMutations() {\n  const { toast } = useToast();\n\n  const createPlan = useMutation({\n    mutationFn: api.createPlan,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"plans\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Diyet planı başarıyla oluşturuldu.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Diyet planı oluşturulurken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePlan = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertDietPlan> }) => \n      api.updatePlan(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"plans\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Diyet planı başarıyla güncellendi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Diyet planı güncellenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePlan = useMutation({\n    mutationFn: api.deletePlan,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"plans\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Diyet planı başarıyla silindi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Diyet planı silinirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return {\n    createPlan,\n    updatePlan,\n    deletePlan,\n  };\n}\n","size_bytes":2228},"client/src/lib/hooks/useTemplates.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Template, InsertTemplate } from \"@shared/schema\";\n\nexport function useTemplates() {\n  const { toast } = useToast();\n\n  const query = useQuery({\n    queryKey: [\"templates\"],\n    queryFn: api.getTemplates,\n  });\n\n  const createTemplate = useMutation({\n    mutationFn: api.createTemplate,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"templates\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Şablon başarıyla oluşturuldu.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Şablon oluşturulurken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTemplate = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertTemplate> }) => \n      api.updateTemplate(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"templates\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Şablon başarıyla güncellendi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Şablon güncellenirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTemplate = useMutation({\n    mutationFn: api.deleteTemplate,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"templates\"] });\n      toast({\n        title: \"Başarılı\",\n        description: \"Şablon başarıyla silindi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Şablon silinirken bir hata oluştu.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return {\n    data: query.data,\n    isLoading: query.isLoading,\n    createTemplate,\n    updateTemplate,\n    deleteTemplate,\n  };\n}\n\nexport function useTemplate(id: string) {\n  return useQuery({\n    queryKey: [\"templates\", id],\n    queryFn: () => api.getTemplate(id),\n    enabled: !!id,\n  });\n}\n","size_bytes":2172}},"version":1}